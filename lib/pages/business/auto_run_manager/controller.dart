import 'package:fluent_ui/fluent_ui.dart';
import 'package:get/get.dart';
import 'package:syncfusion_flutter_datagrid/datagrid.dart';

class AutoRunManagerController extends GetxController {
  AutoRunManagerController();
  late int _nShelfNo = 0;
  double dAirPressure = 0.60;
  String _strDataTime = "2022-11-15 18:31:30 星期二";
  final String _strMessage = "就绪...";
  late int _nShelvesNum = 1; //货架配置个数
  late AutoRunLog _autoRunLogJsonData;
  final DataGridController _autoRunLogJsonDataController = DataGridController();
  late AutoRunLogDataSource _autoRunLogDataSource;
  List<AutoRunLogData> _autoRunLogData = <AutoRunLogData>[];
  late Autogenerated _autoGeneratedShel;
  late sigInitZiDongListGenerate _sigInitZiDongListGenerateData =
      sigInitZiDongListGenerate();
  late List<DataStorage> dateList = [
    DataStorage(
        shelfNum: 0,
        storageIndex: 0,
        workPieceType: "",
        stateType: 0,
        processTipInfo: "",
        priorityStatus: false)
  ];
  late StorageStateMessage storageStateMessage = StorageStateMessage(
      sigSetStorageUiStatus: SigSetStorageUiStatus(data: dateList)); //所有货架的货位信息
  final double _dWidthColumn = 100;
  late int _ncurStroageNum = 0; //记录前面货架占用的货位总数
  late bool _bIsClickButton = false; //是否点击按钮获取的通讯

  late int _curShelRow = 5;
  final List<int> _curShelCol = [];
  final GlobalKey _treeTableKey = GlobalKey();
  late List<String> columnStringName = [
    'ID',
    'WarehouseNo',
    'ScanId',
    'ModuleNo',
    'PartNo',
    'Specifications',
    'Routing',
    'CurrentProcess',
    'PriorityStatus',
    'CurrentState'
  ];

  late Map<String, double> columnWidths = {
    columnStringName[0]: _dWidthColumn,
    columnStringName[1]: 100,
    columnStringName[2]: 100,
    columnStringName[3]: 350,
    columnStringName[4]: 350,
    columnStringName[5]: 200,
    columnStringName[6]: 200,
    columnStringName[7]: 200,
    columnStringName[8]: 100,
    columnStringName[9]: 300,
  };

  late List<String> columnStringNameCh = [
    '序号',
    '库位号',
    '扫描ID',
    '模号',
    '件号',
    '规格',
    '工艺路线',
    '当前路线',
    '优先状态',
    '当前状态'
  ];
  List _treeDataList = [];
  // 折叠上方部分
  bool _expandTop = false;

  _initData() {
    update(["auto_run_manager"]);
  }

  void onTap() {}

  // @override
  // void onInit() {
  //   super.onInit();
  // }

  @override
  void onReady() {
    super.onReady();
    _initData();
  }

  // @override
  // void onClose() {
  //   super.onClose();
  // }
}

class AutoRunLog {
  List<AutoRunLogJson>? autoRunLogJson;

  AutoRunLog({this.autoRunLogJson});

  AutoRunLog.fromJson(Map<String, dynamic> json) {
    if (json['AutoRunLogJson'] != null) {
      autoRunLogJson = <AutoRunLogJson>[];
      json['AutoRunLogJson'].forEach((v) {
        autoRunLogJson!.add(new AutoRunLogJson.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.autoRunLogJson != null) {
      data['AutoRunLogJson'] =
          this.autoRunLogJson!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class AutoRunLogJson {
  String? strId;
  String? strWarehouseNo;
  String? strScanId;
  String? strModuleNo;
  String? strPartNo;
  String? strSpecifications;
  String? strRouting;
  String? strCurrentProcess;
  String? strPriorityStatus;
  String? strCurrentState;

  AutoRunLogJson(
      {this.strId,
      this.strWarehouseNo,
      this.strScanId,
      this.strModuleNo,
      this.strPartNo,
      this.strSpecifications,
      this.strRouting,
      this.strCurrentProcess,
      this.strPriorityStatus,
      this.strCurrentState});

  AutoRunLogJson.fromJson(Map<String, dynamic> json) {
    strId = json['strId'];
    strWarehouseNo = json['strWarehouseNo'];
    strScanId = json['strScanId'];
    strModuleNo = json['strModuleNo'];
    strPartNo = json['strPartNo'];
    strSpecifications = json['strSpecifications'];
    strRouting = json['strRouting'];
    strCurrentProcess = json['strCurrentProcess'];
    strPriorityStatus = json['strPriorityStatus'];
    strCurrentState = json['strCurrentState'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['strId'] = this.strId;
    data['strWarehouseNo'] = this.strWarehouseNo;
    data['strScanId'] = this.strScanId;
    data['strModuleNo'] = this.strModuleNo;
    data['strPartNo'] = this.strPartNo;
    data['strSpecifications'] = this.strSpecifications;
    data['strRouting'] = this.strRouting;
    data['strCurrentProcess'] = this.strCurrentProcess;
    data['strPriorityStatus'] = this.strPriorityStatus;
    data['strCurrentState'] = this.strCurrentState;
    return data;
  }
}

class AutoRunLogData {
  AutoRunLogData(
      this.strId,
      this.strWarehouseNo,
      this.strScanId,
      this.strModuleNo,
      this.strPartNo,
      this.strSpecifications,
      this.strRouting,
      this.strCurrentProcess,
      this.strPriorityStatus,
      this.strCurrentState);

  /*'序号',
    '库位号',
    '扫描ID',
    '模号',
    '件号'
    '规格'
    '工艺路线',
    '当前工艺',
    '优先状态',
    '当前状态'*/

  String? strId;
  String? strWarehouseNo;
  String? strScanId;
  String? strModuleNo;
  String? strPartNo;
  String? strSpecifications;
  String? strRouting;
  String? strCurrentProcess;
  String? strPriorityStatus;
  String? strCurrentState;
}

class AutoRunLogDataSource extends DataGridSource {
  AutoRunLogDataSource({required List<AutoRunLogData> employees}) {
    _employeeData = employees
        .map<DataGridRow>((e) => DataGridRow(cells: [
              DataGridCell<String>(
                  columnName: columnStringName[0], value: e.strId),
              DataGridCell<String>(
                  columnName: columnStringName[1], value: e.strWarehouseNo),
              DataGridCell<String>(
                  columnName: columnStringName[2], value: e.strScanId),
              DataGridCell<String>(
                  columnName: columnStringName[3], value: e.strModuleNo),
              DataGridCell<String>(
                  columnName: columnStringName[4], value: e.strPartNo),
              DataGridCell<String>(
                  columnName: columnStringName[5], value: e.strSpecifications),
              DataGridCell<String>(
                  columnName: columnStringName[6], value: e.strRouting),
              DataGridCell<String>(
                  columnName: columnStringName[7], value: e.strCurrentProcess),
              DataGridCell<Text>(
                  columnName: columnStringName[8],
                  value: Text(e.strPriorityStatus!,
                      style: TextStyle(color: Color(0xFF45DA4D)))),
              DataGridCell<String>(
                  columnName: columnStringName[9], value: e.strCurrentState),
            ]))
        .toList();
  }

  late List<String> columnStringName = [
    'strId',
    'strWarehouseNo',
    'strScanId',
    'strModuleNo',
    'strPartNo',
    'strSpecifications',
    'strRouting',
    'strCurrentProcess',
    'strPriorityStatus',
    'strCurrentState'
  ];

  List<DataGridRow> _employeeData = [];

  @override
  List<DataGridRow> get rows => _employeeData;

  @override
  Future<void> handleLoadMoreRows() async {
    await Future.delayed(Duration(milliseconds: 300));
    notifyListeners();
  }

  @override
  DataGridRowAdapter? buildRow(DataGridRow row) {
    return DataGridRowAdapter(
        cells: row.getCells().map<Widget>((e) {
      return Container(
        alignment: Alignment.center,
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        child: (e.columnName == "strPriorityStatus")
            ? e.value
            : Text(e.value.toString()),
      );
    }).toList());
  }
}

class sigInitZiDongListGenerate {
  SigInitZiDongList? sigInitZiDongList;

  sigInitZiDongListGenerate({this.sigInitZiDongList});

  sigInitZiDongListGenerate.fromJson(Map<String, dynamic> json) {
    sigInitZiDongList = json['sigInitZiDongList'] != null
        ? SigInitZiDongList.fromJson(json['sigInitZiDongList'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (sigInitZiDongList != null) {
      data['sigInitZiDongList'] = sigInitZiDongList!.toJson();
    }
    return data;
  }
}

class SigInitZiDongList {
  List<SigInitData>? data;

  SigInitZiDongList({this.data});

  SigInitZiDongList.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <SigInitData>[];
      json['data'].forEach((v) {
        data!.add(SigInitData.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class SigInitData {
  int? state;
  int? moreWorkpieceMark;
  SigInitItem? item;

  SigInitData({this.state, this.moreWorkpieceMark, this.item});

  SigInitData.fromJson(Map<String, dynamic> json) {
    state = json['state'];
    moreWorkpieceMark = json['MoreWorkpieceMark'];
    item = json['item'] != null ? SigInitItem.fromJson(json['item']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['state'] = state;
    data['MoreWorkpieceMark'] = moreWorkpieceMark;
    if (item != null) {
      data['item'] = item!.toJson();
    }
    return data;
  }
}

class SigInitItem {
  MainWorkpieceData? mainWorkpieceData;
  List<MoreWorkoieceData>? moreWorkoieceData;

  SigInitItem({this.mainWorkpieceData, this.moreWorkoieceData});

  SigInitItem.fromJson(Map<String, dynamic> json) {
    mainWorkpieceData = json['MainWorkpieceData'] != null
        ? MainWorkpieceData.fromJson(json['MainWorkpieceData'])
        : null;
    if (json['MoreWorkoieceData'] != null) {
      moreWorkoieceData = <MoreWorkoieceData>[];
      json['MoreWorkoieceData'].forEach((v) {
        moreWorkoieceData!.add(MoreWorkoieceData.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (mainWorkpieceData != null) {
      data['MainWorkpieceData'] = mainWorkpieceData!.toJson();
    }
    if (moreWorkoieceData != null) {
      data['MoreWorkoieceData'] =
          moreWorkoieceData!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class MainWorkpieceData {
  int? storageIndex;
  String? barCode;
  String? mouldSN;
  String? partSN;
  String? precision;
  String? quadrant;
  String? specifications;
  String? processRoute;
  String? curProcessType;
  String? priorityStatus;
  String? electrodeSatusInfo;
  String? schStaTime;
  int? orderNum;

  MainWorkpieceData(
      {this.storageIndex,
      this.barCode,
      this.mouldSN,
      this.partSN,
      this.precision,
      this.quadrant,
      this.specifications,
      this.processRoute,
      this.curProcessType,
      this.priorityStatus,
      this.electrodeSatusInfo,
      this.schStaTime,
      this.orderNum});

  MainWorkpieceData.fromJson(Map<String, dynamic> json) {
    storageIndex = json['StorageIndex'];
    barCode = json['BarCode'];
    mouldSN = json['MouldSN'];
    partSN = json['PartSN'];
    precision = json['Precision'];
    quadrant = json['Quadrant'];
    specifications = json['Specifications'];
    processRoute = json['ProcessRoute'];
    curProcessType = json['CurProcessType'];
    priorityStatus = json['PriorityStatus'];
    electrodeSatusInfo = json['ElectrodeSatusInfo'];
    schStaTime = json['SchStaTime'];
    orderNum = json['orderNum'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['StorageIndex'] = storageIndex;
    data['BarCode'] = barCode;
    data['MouldSN'] = mouldSN;
    data['PartSN'] = partSN;
    data['Precision'] = precision;
    data['Quadrant'] = quadrant;
    data['Specifications'] = specifications;
    data['ProcessRoute'] = processRoute;
    data['CurProcessType'] = curProcessType;
    data['PriorityStatus'] = priorityStatus;
    data['ElectrodeSatusInfo'] = electrodeSatusInfo;
    data['SchStaTime'] = schStaTime;
    data['orderNum'] = orderNum;
    return data;
  }
}

class MoreWorkoieceData {
  int? storageIndex;
  String? barCode;
  String? mouldSN;
  String? partSN;
  String? precision;
  String? quadrant;
  String? specifications;
  String? processRoute;
  String? curProcessType;
  String? priorityStatus;
  String? electrodeSatusInfo;
  String? schStaTime;
  int? orderNum;

  MoreWorkoieceData(
      {this.storageIndex,
      this.barCode,
      this.mouldSN,
      this.partSN,
      this.precision,
      this.quadrant,
      this.specifications,
      this.processRoute,
      this.curProcessType,
      this.priorityStatus,
      this.electrodeSatusInfo,
      this.schStaTime,
      this.orderNum});

  MoreWorkoieceData.fromJson(Map<String, dynamic> json) {
    storageIndex = json['StorageIndex'];
    barCode = json['BarCode'];
    mouldSN = json['MouldSN'];
    partSN = json['PartSN'];
    precision = json['Precision'];
    quadrant = json['Quadrant'];
    specifications = json['Specifications'];
    processRoute = json['ProcessRoute'];
    curProcessType = json['CurProcessType'];
    priorityStatus = json['PriorityStatus'];
    electrodeSatusInfo = json['ElectrodeSatusInfo'];
    schStaTime = json['SchStaTime'];
    orderNum = json['orderNum'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['StorageIndex'] = storageIndex;
    data['BarCode'] = barCode;
    data['MouldSN'] = mouldSN;
    data['PartSN'] = partSN;
    data['Precision'] = precision;
    data['Quadrant'] = quadrant;
    data['Specifications'] = specifications;
    data['ProcessRoute'] = processRoute;
    data['CurProcessType'] = curProcessType;
    data['PriorityStatus'] = priorityStatus;
    data['ElectrodeSatusInfo'] = electrodeSatusInfo;
    data['SchStaTime'] = schStaTime;
    data['orderNum'] = orderNum;
    return data;
  }
}

class Autogenerated {
  ShelfInfo? shelfInfo;

  Autogenerated({this.shelfInfo});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    shelfInfo = json['ShelfInfo'] != null
        ? ShelfInfo.fromJson(json['ShelfInfo'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (shelfInfo != null) {
      data['ShelfInfo'] = shelfInfo!.toJson();
    }
    return data;
  }
}

class ShelfInfo {
  List<Data>? data;
  String? message;
  bool? success;

  ShelfInfo({this.data, this.message, this.success});

  ShelfInfo.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <Data>[];
      json['data'].forEach((v) {
        data!.add(Data.fromJson(v));
      });
    }
    message = json['message'];
    success = json['success'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    data['message'] = message;
    data['success'] = success;
    return data;
  }
}

class Data {
  int? shelfNum;
  int? startIndex;
  int? endIndex;
  List<ShelfSpecifications>? shelfSpecifications;
  String? shelfType;

  Data(
      {this.shelfNum,
      this.startIndex,
      this.endIndex,
      this.shelfSpecifications,
      this.shelfType});

  Data.fromJson(Map<String, dynamic> json) {
    shelfNum = json['ShelfNum'];
    startIndex = json['StartIndex'];
    endIndex = json['EndIndex'];
    if (json['ShelfSpecifications'] != null) {
      shelfSpecifications = <ShelfSpecifications>[];
      json['ShelfSpecifications'].forEach((v) {
        shelfSpecifications!.add(ShelfSpecifications.fromJson(v));
      });
    }
    shelfType = json['ShelfType'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ShelfNum'] = shelfNum;
    data['StartIndex'] = startIndex;
    data['EndIndex'] = endIndex;
    if (shelfSpecifications != null) {
      data['ShelfSpecifications'] =
          shelfSpecifications!.map((v) => v.toJson()).toList();
    }
    data['ShelfType'] = shelfType;
    return data;
  }
}

class ShelfSpecifications {
  int? row;
  int? coll;

  ShelfSpecifications({this.row, this.coll});

  ShelfSpecifications.fromJson(Map<String, dynamic> json) {
    row = json['row'];
    coll = json['Coll'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['row'] = row;
    data['Coll'] = coll;
    return data;
  }
}

class StorageStateMessage {
  SigSetStorageUiStatus? sigSetStorageUiStatus;

  StorageStateMessage({this.sigSetStorageUiStatus});

  StorageStateMessage.fromJson(Map<String, dynamic> json) {
    sigSetStorageUiStatus = json['sigSetStorageUiStatus'] != null
        ? SigSetStorageUiStatus.fromJson(json['sigSetStorageUiStatus'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (sigSetStorageUiStatus != null) {
      data['sigSetStorageUiStatus'] = sigSetStorageUiStatus!.toJson();
    }
    return data;
  }
}

class SigSetStorageUiStatus {
  List<DataStorage>? data;

  SigSetStorageUiStatus({this.data});

  SigSetStorageUiStatus.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <DataStorage>[];
      json['data'].forEach((v) {
        data!.add(DataStorage.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class DataStorage {
  int? shelfNum;
  int? storageIndex;
  String? workPieceType;
  int? stateType;
  String? processTipInfo;
  bool? priorityStatus;

  DataStorage(
      {this.shelfNum,
      this.storageIndex,
      this.workPieceType,
      this.stateType,
      this.processTipInfo,
      this.priorityStatus});

  DataStorage.fromJson(Map<String, dynamic> json) {
    shelfNum = json['ShelfNum'];
    storageIndex = json['StorageIndex'];
    workPieceType = json['WorkPieceType'];
    stateType = json['StateType'];
    processTipInfo = json['ProcessTipInfo'];
    priorityStatus = json['PriorityStatus'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ShelfNum'] = shelfNum;
    data['StorageIndex'] = storageIndex;
    data['WorkPieceType'] = workPieceType;
    data['StateType'] = stateType;
    data['ProcessTipInfo'] = processTipInfo;
    data['PriorityStatus'] = priorityStatus;
    return data;
  }
}
