import 'dart:async';
import 'dart:convert';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
// import '../../../../data/data_color_custom_setting.dart';
// import '../../../layout/layout_controller.dart';
import 'StorageMessageState.dart';
import 'paperPainter.dart';
// import '../locationShowData.dart';
import 'animatedSpriteImage.dart';
import 'dart:ui' as ui;
import 'package:get/get.dart';
import 'locationShowData.dart';

class PaperNew extends StatefulWidget {
  PaperNew(
      {Key? key,
      required this.dWidth,
      required this.dHeight,
      required this.onTapCallBack,
      required this.curShelRow,
      required this.curShelCol,
      required this.storageStateMessagePaper,
      required this.curStroageNum})
      : super(key: key);

  late double dWidth;
  late double dHeight;
  late int curShelRow = 5;
  final List<int> curShelCol;
  late int curStroageNum = 0;
  final StorageStateMessage storageStateMessagePaper;
  final Function onTapCallBack;
  @override
  _PaperNewState createState() => _PaperNewState();
}

class _PaperNewState extends State<PaperNew> {
  late Autogenerated chartData; //用于读写文件使用
  late Autogenerated stateChartImages; //用于界面显示使用
  int _nColumn = -1;
  int nIdx = 0;
  int boxFit = 1;
  late ui.Image? imageLi = null;
  bool bIsLoadImg = false; //记录加载图像是否成功
  static const double dContainerPadding = 5;
  double dLeft = dContainerPadding / 2,
      dRight = dContainerPadding / 2,
      dTop = 0,
      dBottom = 0;
  final int _nStateUpdata = 4, _nStateStlUpdata = 10;
  int _nLineOrRect = 2; //0是空 1是线  2是边框
  // DataColorCustomSetting _colorCustomSetting = DataColorCustomSetting.init();
  List<String> imagesStr = [
    "assets/images/autoRun/1.png",
    "assets/images/autoRun/lock.png",
    "assets/images/autoRun/daisaomiao.png",
    "assets/images/autoRun/chuli.png",
    "assets/images/autoRun/chuli.png",
    "assets/images/autoRun/yichang.png",
    "assets/images/autoRun/hege.png",
    "assets/images/autoRun/buhege.png",
    "assets/images/autoRun/ArtfiactsWaitScan[1].png",
    "assets/images/autoRun/ArtfiactsNormal[1].png",
    "assets/images/autoRun/ArtfiactsNormal[1].png",
    "assets/images/autoRun/ArtfiactsAbnormal[1].png",
    "assets/images/autoRun/ArtfiactsOk[1].png",
    "assets/images/autoRun/ArtfiactsNG[1].png",
  ];

  // Future loadBreakfast() async {
  //   String jsonAddress =
  //       await rootBundle.loadString('assets/json/LocationShowData.json');
  //   final jsonResponse = json.decode(jsonAddress);
  //   chartData = Autogenerated.fromJson(jsonResponse);

  //   stateChartImages = chartData;
  //   _nColumn = chartData.stateImages.length;

  //   //setState(() {});
  // }

  @override
  void initState() {
    _loadImage();
    // loadBreakfast();
    super.initState();
  }

  void _loadImage() async {
    imageLi = await loadImageFromAssets("assets/images/autoRun/1.png");

    //setState(() {});
  }

  //更新数据
  void updataBreakfastIcon(int nIndex) {
    String ImageStr = "assets/img/stateImg/buhege.png";
    //修改json文件数据
    int nImageStrId = 0;
    for (int i = 0; i < imagesStr.length; i++) {
      if (imagesStr[i] == ImageStr) {
        nImageStrId = i;
        break;
      }
    }

    bool bisTrue = false;
    for (int m = 0; m < chartData.stateImages.length; m++) {
      for (int k = 0; k < chartData.stateImages[m].workId.length; k++) {
        if (nIndex == chartData.stateImages[m].workId[k].id) {
          if (nImageStrId != chartData.stateImages[m].workId[k].nStateImages) {
            chartData.stateImages[m].workId[k].nStateImages = nImageStrId;
          }

          bisTrue = true;
          break;
        }
        if (bisTrue) break;
      }
    }

    Autogenerated.createLoginSaveFlie(
        chartData, "assets/json/LocationShowData.json");

    stateChartImages = chartData;
    //setState(() {});
  }

  //计算底部编号显示
  String _dataCountTransition(int nCount) {
    String strCount = "001";
    //strCount = nCount > 99 ? "$nCount" : "0$nCount";
    //strCount = nCount < 10 ? "00$nCount" : strCount;
    strCount = "$nCount";
    return strCount;
  }

  //按钮Row
  List<Widget> _initDrawRowContainerT(int nColumn) {
    List<Widget> ary = [];
    String? strCount = "";
    int nRowCount = 10;
    int nColumnCount = widget.curShelRow;
    boxFit = 1;
    if (widget.curShelCol.length > nColumn) {
      nRowCount = widget.curShelCol[nColumn];
    }

    for (int m = 0; m < nRowCount; m++) {
      dLeft = dContainerPadding / 2;
      dRight = dContainerPadding / 2;
      if (m == nRowCount - 1) {
        dRight = 0;
      } else if (m == 0) {
        dLeft = 0;
      }

      if (nColumn == 0) {
        dTop = 0;
      } else if (nColumn == nColumnCount - 1) {
        dBottom = 0;
      }
      ary.add(Expanded(
          flex: boxFit,
          child: Container(
            alignment: Alignment.bottomCenter,
            margin: EdgeInsets.fromLTRB(dLeft, dTop, dRight, dBottom),
            child: Listener(
                onPointerDown: (e) {},
                behavior: HitTestBehavior.opaque, //显性的修改behavior属性
                child: OutlinedButton(
                  onPressed: () {
                    int nRowCol = m + 1 + widget.curStroageNum;
                    if (widget.curShelCol.length > nColumn) {
                      for (int i = 0; i < nColumn; i++) {
                        nRowCol += widget.curShelCol[i];
                      }
                    }
                    strCount = nRowCol.toString();
                    widget.onTapCallBack(nRowCol);
                  },
                  style: ButtonStyle(
                    minimumSize: MaterialStateProperty.all(
                        const Size(double.infinity, double.infinity)),
                    overlayColor: MaterialStateProperty.all(
                        const Color.fromARGB(80, 255, 0, 0)),
                    shape: MaterialStateProperty.all(
                      RoundedRectangleBorder(
                          // borderRadius: BorderRadius.circular(3.0)
                          ),
                    ),
                  ),
                  child: const Text(
                    "",
                    overflow: TextOverflow.ellipsis, // 显示不完，就在后面显示点点
                    style: TextStyle(
                      inherit: false,
                      fontSize: 15.0, height: 10.5, color: Colors.black, // 文字大小
                    ),
                  ),
                )),
          )));
    }

    return ary;
  }

  Future<void> _onPointerDown(PointerDownEvent event) async {
    // Check if right mouse button clicked
    if (event.kind == ui.PointerDeviceKind.mouse &&
        event.buttons == kSecondaryMouseButton) {
      final overlay =
          Overlay.of(context).context.findRenderObject() as RenderBox;

      //这个是选中的
      int _CheckPopMenu() {
        int nVal = 0;
        new PopupMenuButton<int>(
            itemBuilder: (BuildContext context) => <PopupMenuItem<int>>[
                  new CheckedPopupMenuItem<int>(
                      checked: true, value: 1, child: new Text('Item One')),
                  new CheckedPopupMenuItem<int>(
                      checked: false,
                      value: 0,
                      child: Divider(thickness: 1, color: Colors.black),
                      height: 2),
                  new CheckedPopupMenuItem<int>(
                      checked: false, value: 2, child: new Text('Item Three')),
                ],
            onSelected: (int value) {
              setState(() {
                nVal = value;
              });
            });

        return nVal;
      }

      final menuItem = await showMenu<int>(
          context: context,
          items: [
            PopupMenuItem(
              child: Text('优先'),
              value: 1,
            ),
            // CheckedPopupMenuItem(
            //     checked: true, value: 1, child: new Text('优先')),
            //ListTile( leading: Icon(Icons.looks_one), title: Text('Item One')) 添加图标
            // PopupMenuItem(child: ListTile( leading: Icon(Icons.looks_one), title: Text('优先')),
            //   value: 1,height: 20,padding: EdgeInsets.fromLTRB(5, 0, 0, 5),),
            PopupMenuDivider(height: 1),
            // PopupMenuItem(child: ListTile( leading: Icon(Icons.looks_two), title:Text('取消优先')),
            //   value: 2,height: 20,padding: EdgeInsets.fromLTRB(5, 5, 0, 0),),
            PopupMenuItem(
              child: Text('取消优先'),
              value: 2,
            ),
            // CheckedPopupMenuItem(
            //     checked: false, value: 2, child: new Text('取消优先')),
          ],
          position: RelativeRect.fromSize(
              event.position & Size(48.0, 48.0), overlay.size));
      // Check if menu item clicked
      switch (menuItem) {
        case 1:
          print('object');
          // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          //   content: Text('Copy clicket'),
          //   behavior: SnackBarBehavior.floating,
          // ));
          break;
        case 2:
          print('object1');
          // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          //     content: Text('Cut clicked'),
          //     behavior: SnackBarBehavior.floating));
          break;
        default:
      }
    }
  }

  //按钮Column
  List<Widget> _initDrawColumnContainerT() {
    List<Widget> ary = [];
    double dBottomT = 5;
    int nColumnCount = widget.curShelRow;

    double dHeightTemp =
        (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                nColumnCount -
            1;
    for (int m = 0; m < nColumnCount; m++) {
      if (m == nColumnCount - 1) {
        dBottomT = 0;
      }

      ary.add(
        Container(
          margin: EdgeInsets.fromLTRB(0, 0, 0, dBottomT),
          height: dHeightTemp - 1 > 10 ? dHeightTemp : 10,
          width: widget.dWidth,
          child: Row(
            children: _initDrawRowContainerT(m),
          ),
        ),
      );
    }

    return ary;
  }

  //底部方框和文字Row
  List<Widget> _initDrawRowContainer(int nColumn, int nAction) {
    List<Widget> ary = [];
    int nColumnCount = widget.curShelRow, nRowCount = 10;
    if (widget.curShelCol.length > nColumn) {
      nRowCount = widget.curShelCol[nColumn];
    }
    String strCount = "";

    // Color colorT = _colorCustomSetting.isDarkMode
    //     ? _colorCustomSetting.ColorWidget
    //     : _colorCustomSetting.ColorWidgetLight;
    Color colorT = Colors.white;
    boxFit = 1;
    if (nRowCount > 1) {
      for (int m = 0; m < nRowCount; m++) {
        // colorT = _colorCustomSetting.isDarkMode
        //     ? _colorCustomSetting.ColorWidget
        //     : _colorCustomSetting.ColorWidgetLight;
        int nRowCol = m + 1 + widget.curStroageNum;
        if (widget.curShelCol.length > nColumn) {
          for (int i = 0; i < nColumn; i++) {
            nRowCol += widget.curShelCol[i];
          }
        } else {
          nRowCol = m + 1 + nColumn * nRowCount;
        }

        //现在只考虑货架每一行只显示一种货位类型 平分货位
        strCount = _dataCountTransition(nRowCol);
        bool bIsNullCheck = false;
        if (widget.storageStateMessagePaper.sigSetStorageUiStatus != null) {
          if (widget.storageStateMessagePaper.sigSetStorageUiStatus!.data ==
              null) {
            bIsNullCheck = true;
          }
        } else {
          bIsNullCheck = true;
        }

        String strData = "";
        bool bPriorityStatus = false;
        if (!bIsNullCheck) {
          for (int kk = 0;
              kk <
                  widget.storageStateMessagePaper.sigSetStorageUiStatus!.data!
                      .length;
              kk++) {
            if (nRowCol ==
                widget.storageStateMessagePaper.sigSetStorageUiStatus!.data![kk]
                    .storageIndex) {
              if (_nStateUpdata ==
                      widget.storageStateMessagePaper.sigSetStorageUiStatus!
                          .data![kk].stateType ||
                  _nStateStlUpdata ==
                      widget.storageStateMessagePaper.sigSetStorageUiStatus!
                          .data![kk].stateType) {
                colorT = Color.fromARGB(80, 255, 255, 0);
              }
              strData = widget.storageStateMessagePaper.sigSetStorageUiStatus!
                  .data![kk].processTipInfo!;

              bPriorityStatus = widget.storageStateMessagePaper
                  .sigSetStorageUiStatus!.data![kk].priorityStatus!;

              break;
            }
          }
        }

        dLeft = dContainerPadding / 2;
        dRight = dContainerPadding / 2;
        if (m == nRowCount - 1) {
          dRight = 0;
        } else if (m == 0) {
          dLeft = 0;
        }

        if (nColumn == 0) {
          dTop = 0;
        } else if (nColumn == nColumnCount - 1) {
          dBottom = 0;
        }

        if (1 != nAction) {
          ary.add(Expanded(
              flex: boxFit,
              child: Stack(
                children: [
                  Container(
                    alignment: Alignment.bottomLeft,
                    margin: EdgeInsets.fromLTRB(dLeft, dTop, dRight, dBottom),
                    padding: const EdgeInsets.only(left: 3),
                    decoration: BoxDecoration(
                      // color
                      color: colorT,
                      //设置边框
                      border: _nLineOrRect == 2
                          ? Border.all(
                              // color: _colorCustomSetting.isDarkMode
                              //     ? Colors.white
                              //     : Colors.black,
                              width: 0.5)
                          : null,

                      //设置四周圆角 角度
                      // borderRadius: const BorderRadius.all(Radius.circular(3.0)),
                    ),
                    child: Text(
                      strCount,
                      overflow: TextOverflow.ellipsis, // 显示不完，就在后面显示点点
                      style: const TextStyle(
                        fontSize: 15.0,
                      ),
                    ),
                  ),
                  bPriorityStatus
                      ? Positioned(
                          child: Image(
                            width: 30,
                            height: 30,
                            image: AssetImage(
                                "assets/img/stateImg/fanhuidingbuzhiding.png"),
                            fit: BoxFit.fill,
                          ),
                          right: 5,
                          top: 2,
                        )
                      : Container()
                ],
              )));
        } else {
          double dBottomHeight = 20;
          dBottomHeight =
              (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                      nColumnCount -
                  1;
          dBottomHeight = dBottomHeight * 1 / 6;
          int nRedOrBlue = 0;
          if (strData == "锁定") {
            nRedOrBlue = 1;
          }

          ary.add(Expanded(
              flex: boxFit,
              child: Container(
                alignment: Alignment.bottomCenter,
                margin: EdgeInsets.fromLTRB(dLeft, dTop, dRight, dBottom),
                padding: EdgeInsets.only(bottom: dBottomHeight),
                child: Text(
                  strData,
                  overflow: TextOverflow.ellipsis, // 显示不完，就在后面显示点点
                  style: TextStyle(
                      fontSize: 20.0,
                      color: nRedOrBlue == 1 ? Colors.red : Colors.blue,
                      fontWeight: FontWeight.w700),
                ),
              )));
        }
      }
    }

    return ary;
  }

  //底部方框和文字Column  nAction 1是写文字  非1是方框和序号
  List<Widget> _initDrawColumnContainer(int nAction) {
    List<Widget> ary = [];
    double dBottomT = 5;
    int nColumnCount = widget.curShelRow;

    for (int m = 0; m < nColumnCount; m++) {
      if (m == nColumnCount - 1) {
        dBottomT = 0;
      }
      ary.add(
        Container(
          margin: EdgeInsets.fromLTRB(0, 0, 0, dBottomT),
          height: (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                  nColumnCount -
              1,
          width: widget.dWidth,
          child: Row(
            children: _initDrawRowContainer(m, nAction),
          ),
        ),
      );
    }

    return ary;
  }

  //加载图像Row
  List<Widget> _initDrawImageRow(int nColumn) {
    List<Widget> ary = [];
    double dW = 10, dW1 = 10;
    BoxFit boxFitT = BoxFit.fitHeight;
    int nRowCount = 10;
    int nColumnCount = widget.curShelRow;
    boxFit = 1;
    if (widget.curShelCol.length > nColumn) {
      nRowCount = widget.curShelCol[nColumn];
    }

    for (int m = 0; m < nRowCount; m++) {
      bool bIsFlag = false;

      boxFitT = BoxFit.contain;
      // boxFitT = BoxFit.fitHeight;
      // if (stateChartImages.stateImages[nColumn].workId[m].productPoint > 1) {
      //   boxFitT = BoxFit.fill;
      // }
      // nIdx = stateChartImages.stateImages[nColumn].workId[m].nStateImages;
      nIdx = 0;
      int nRowCol = m + 1 + widget.curStroageNum;
      if (widget.curShelCol.length > nColumn) {
        for (int i = 0; i < nColumn; i++) {
          nRowCol += widget.curShelCol[i];
        }
      }

      bool bIsNullCheck = false;
      if (widget.storageStateMessagePaper.sigSetStorageUiStatus != null) {
        if (widget.storageStateMessagePaper.sigSetStorageUiStatus!.data ==
            null) {
          bIsNullCheck = true;
        }
      } else {
        bIsNullCheck = true;
      }

      if (!bIsNullCheck) {
        for (int kk = 0;
            kk <
                widget.storageStateMessagePaper.sigSetStorageUiStatus!.data!
                    .length;
            kk++) {
          if (nRowCol ==
              widget.storageStateMessagePaper.sigSetStorageUiStatus!.data![kk]
                  .storageIndex) {
            //"状态类型，-1:锁住,0:初始值,1:空库位,2:待扫描,3:待处理,4:处理中,5:异常,6:合格,7:不合格,8:暂停"
            nIdx = _statusDataToImageId(widget.storageStateMessagePaper
                .sigSetStorageUiStatus!.data![kk].stateType!);

            //如果是钢件
            if ("STEEL" ==
                widget.storageStateMessagePaper.sigSetStorageUiStatus!.data![kk]
                    .workPieceType!) {
              nIdx = nIdx >= 2 ? nIdx + 6 : nIdx;

              boxFitT = BoxFit.scaleDown;
              if (nIdx == 1) {
                boxFitT = BoxFit.contain;
              }
            }

            // bPriorityStatus = widget.storageStateMessagePaper
            //     .sigSetStorageUiStatus!.data![kk].priorityStatus!;

            // print("444444444444 $bPriorityStatus");
            break;
          }
        }
      }

      dLeft = dContainerPadding * 1.5;
      dRight = dContainerPadding * 1.5;

      if (nIdx > 0) {
        // if (bPriorityStatus) {
        //   ary.add(Expanded(
        //       flex: boxFit,
        //       child: Stack(children: [
        //         Container(
        //             margin: EdgeInsets.fromLTRB(dLeft, 15, dRight, 15),
        //             child: Image.asset(
        //               imagesStr[nIdx],
        //               fit: boxFitT,
        //             )),
        //         // Positioned(
        //         //   child: Image(
        //         //     width: 20,
        //         //     height: 20,
        //         //     image: AssetImage(
        //         //         "assets/img/stateImg/fanhuidingbuzhiding.png"),
        //         //     fit: boxFitT,
        //         //   ),
        //         //   right: 5,
        //         //   top: 2,
        //         // )
        //       ])));
        // } else {
        ary.add(Expanded(
          flex: boxFit,
          child: Container(
              margin: EdgeInsets.fromLTRB(dLeft, 15, dRight, 15),
              child: Image.asset(
                imagesStr[nIdx],
                fit: boxFitT,
              )),
        ));
        // }
      } else if (nIdx == 0) {
        ary.add(Expanded(
          flex: boxFit,
          child: Text(""),
        ));
      }
    }

    dLeft = dContainerPadding / 2;
    dRight = dContainerPadding / 2;
    return ary;
  }

  //加载图像Column
  List<Widget> _initDrawImageColumn() {
    List<Widget> ary = [];
    int nColumnCount = widget.curShelRow;
    double dBottomT = 5;

    for (int m = 0; m < nColumnCount; m++) {
      if (m == nColumnCount - 1) {
        dBottomT = 0;
      }

      ary.add(
        Container(
          margin: EdgeInsets.fromLTRB(0, 0, 0, dBottomT),
          height: (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                  nColumnCount -
              1,
          width: widget.dWidth,
          child: Row(
            children: _initDrawImageRow(m),
          ),
        ),
      );
    }

    return ary;
  }

  //自绘-线
  List<Widget> _initDrawColumnLine(double dHeight) {
    List<Widget> ary = [];
    double dBottomT = 5;
    int nColumnCount = widget.curShelRow;

    double dWidthExp = 270;
    // LayoutController layoutController = Get.find();
    // if (layoutController.isMaximize) {
    //   dWidthExp = 30;
    // }

    if (_nLineOrRect == 1 && _nColumn > 1) {
      for (int m = 0; m < nColumnCount; m++) {
        if (m == nColumnCount - 1) {
          dBottomT = 0;
        }

        ary.add(Container(
            margin: EdgeInsets.fromLTRB(0, 0, 0, dBottomT),
            child: CustomPaint(
                size: Size(
                    widget.dWidth,
                    (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                            nColumnCount -
                        1),
                painter: PaperPainter(
                    0,
                    ((widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                                nColumnCount) /
                            2 +
                        dHeight,
                    widget.dWidth - dWidthExp,
                    ((widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                                nColumnCount) /
                            2 +
                        dHeight))));
      }
    }

    return ary;
  }

  int _statusDataToImageId(int nstatusId) {
    int nStateImages = 0;
    switch (nstatusId) {
      case -1:
        nStateImages = 1; //锁的图片
        break;
      case 0: //空货位
      case 1:
        nStateImages = 0;
        break;
      case 2:
        nStateImages = 2;
        break;
      case 3:
        nStateImages = 3;
        break;
      case 4:
        nStateImages = 4;
        break;
      case 5:
        nStateImages = 5;
        break;
      case 6:
        nStateImages = 6;
        break;
      case 7:
        nStateImages = 7;
        break;
      case 8:
        nStateImages = 0;
        break;
      case 9:
        nStateImages = 3;
        break;
      default:
        nStateImages = 0;
        break;
    }

    return nStateImages;
  }

  //动画Row
  List<Widget> _initDrawRowAnimationController(int nColumn) {
    List<Widget> ary = [];
    double dW = 8, dW1 = 5;
    int nColumnCount = widget.curShelRow, nRowCount = 10;
    int nEndIndex = 7, nStartIndex = -5;
    if (widget.curShelCol.length > nColumn) {
      nRowCount = widget.curShelCol[nColumn];
    }

    //容器的宽度
    double dConW = (widget.dWidth - dLeft * (nRowCount + 1)) / nRowCount;

    //图像的宽度
    double dOffsetX = 5.0, dOffsetY = widget.dHeight / nColumnCount;
    for (int m = 0; m < nRowCount; m++) {
      boxFit = 1;
      int nStateImages = 0;
      int nRowCol = m + 1 + widget.curStroageNum;
      if (widget.curShelCol.length > nColumn) {
        for (int i = 0; i < nColumn; i++) {
          nRowCol += widget.curShelCol[i];
        }
      }

      bool bIsNullCheck = false;
      if (widget.storageStateMessagePaper.sigSetStorageUiStatus != null) {
        if (widget.storageStateMessagePaper.sigSetStorageUiStatus!.data ==
            null) {
          bIsNullCheck = true;
        }
      } else {
        bIsNullCheck = true;
      }

      if (!bIsNullCheck) {
        for (int kk = 0;
            kk <
                widget.storageStateMessagePaper.sigSetStorageUiStatus!.data!
                    .length;
            kk++) {
          if (nRowCol ==
              widget.storageStateMessagePaper.sigSetStorageUiStatus!.data![kk]
                  .storageIndex) {
            // nStateImages = widget.storageStateMessagePaper
            //     .sigSetStorageUiStatus!.data![kk].stateType!;
            //"状态类型，-1:锁住,0:初始值,1:空库位,2:待扫描,3:待处理,4:处理中,5:异常,6:合格,7:不合格,8:暂停"
            nStateImages = _statusDataToImageId(widget.storageStateMessagePaper
                .sigSetStorageUiStatus!.data![kk].stateType!);

            //如果是钢件
            if ("STEEL" ==
                widget.storageStateMessagePaper.sigSetStorageUiStatus!.data![kk]
                    .workPieceType!) {
              nStateImages = nStateImages > 1 ? nStateImages + 6 : nStateImages;
            }

            break;
          }
        }
      }

      if (nStateImages == 0) {
        ary.add(const Expanded(
          flex: 1,
          child: Text(""),
        ));
        continue;
      } else if (nStateImages < 0) {
        continue;
      }

      double dIdx = dConW / dOffsetX * (6 / 10);
      if (_nStateStlUpdata == nStateImages + 1) {
        dIdx = dConW / dOffsetX * (6 / 10);
      }
      nEndIndex = dIdx.toInt() - nStartIndex.abs();
      nEndIndex = nEndIndex < 3 ? 3 : nEndIndex;
      if ((_nStateUpdata == nStateImages || _nStateStlUpdata == nStateImages) &&
          imageLi != null) {
        ary.add(Expanded(
          flex: boxFit,
          child: AnimatedSpriteImage(
            duration: const Duration(milliseconds: 150), //动画的间隔
            image: imageLi!,
            spriteSize: Size(dOffsetX, dOffsetY), //width 横方向移动距离
            startIndex: nStartIndex, //动画起始画面序号
            endIndex: nEndIndex, //动画结束画面序号
            playTimes: 0, //循环次数 0是一直循环
            dImageLeft: 0,
            dImageTop: 0,
            dImageRight:
                (widget.dWidth - dLeft * (nRowCount + 1)) / nRowCount / 2,
            dImageBottom:
                ((widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                            nColumnCount -
                        1) *
                    2,
            axis: Axis.horizontal, //移动的方向,横方向或竖方向
          ),
        ));
      } else {
        ary.add(Expanded(
          flex: boxFit,
          child: const Text(""),
        ));
      }
    }

    return ary;
  }

  //动画Column
  List<Widget> _initDrawColumnAnimationController() {
    List<Widget> ary = [];
    int nColumnCount = widget.curShelRow;
    double dBottomT = 5;

    for (int m = 0; m < nColumnCount; m++) {
      if (m == nColumnCount - 1) {
        dBottomT = 0;
      }

      ary.add(
        Container(
          margin: EdgeInsets.fromLTRB(0, 0, 0, dBottomT),
          height: (widget.dHeight - dContainerPadding * (nColumnCount + 1)) /
                  nColumnCount -
              1,
          width: widget.dWidth,
          child: Row(
            children: _initDrawRowAnimationController(m),
          ),
        ),
      );
    }

    return ary;
  }

  @override
  Widget build(BuildContext context) {
    // windowManager.setMinimumSize(const Size(640, 380));     //给窗口固定一个缩放大小
    // _colorCustomSetting.isDarkModeSet = context.isDarkMode;
    return Container(
        // padding: const EdgeInsets.all(dContainerPadding),
        padding: const EdgeInsets.all(dContainerPadding),
        decoration: BoxDecoration(
          //设置边框
          border: Border.all(
              // color: _colorCustomSetting.isDarkMode
              //     ? _colorCustomSetting.ColorWidget
              //     : _colorCustomSetting.ColorWidgetLight,
              width: 0.3),
          //背景颜色
          // color: Colors.white,
          // color: _colorCustomSetting.isDarkMode
          //     ? _colorCustomSetting.ColorWidget
          //     : _colorCustomSetting.ColorWidgetLight,
          //设置圆角
          // borderRadius: BorderRadius.circular((3.0)),
        ),
        child: Stack(
          children: [
            // 底部容器和文字
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnContainer(0),
            ),
            // 图片
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawImageColumn(),
            ),
            // region <第一条线>
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnLine(0),
            ),
            // endregion
            // region <第一条线>
            // 第二条线
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnLine(5),
            ),
            //endregion
            //动画效果添加
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnAnimationController(),
            ),
            // 容器里面的文字
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnContainer(1),
            ),
            // 按钮
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: _initDrawColumnContainerT(),
            ),
          ],
        ));
  }

  //读取 assets 中的图片
  Future<ui.Image> loadImageFromAssets(String path) async {
    ByteData data = await rootBundle.load(path);
    Uint8List bytes =
        data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
    return decodeImageFromList(bytes);
  }
}
